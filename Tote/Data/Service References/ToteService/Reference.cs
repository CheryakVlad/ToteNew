//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data.ToteService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BetListDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class BetListDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommandGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommandHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DrawField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WinCommandGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WinCommandHomeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BetId {
            get {
                return this.BetIdField;
            }
            set {
                if ((this.BetIdField.Equals(value) != true)) {
                    this.BetIdField = value;
                    this.RaisePropertyChanged("BetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommandGuest {
            get {
                return this.CommandGuestField;
            }
            set {
                if ((object.ReferenceEquals(this.CommandGuestField, value) != true)) {
                    this.CommandGuestField = value;
                    this.RaisePropertyChanged("CommandGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommandHome {
            get {
                return this.CommandHomeField;
            }
            set {
                if ((object.ReferenceEquals(this.CommandHomeField, value) != true)) {
                    this.CommandHomeField = value;
                    this.RaisePropertyChanged("CommandHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryGuest {
            get {
                return this.CountryGuestField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryGuestField, value) != true)) {
                    this.CountryGuestField = value;
                    this.RaisePropertyChanged("CountryGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryHome {
            get {
                return this.CountryHomeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryHomeField, value) != true)) {
                    this.CountryHomeField = value;
                    this.RaisePropertyChanged("CountryHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Draw {
            get {
                return this.DrawField;
            }
            set {
                if ((this.DrawField.Equals(value) != true)) {
                    this.DrawField = value;
                    this.RaisePropertyChanged("Draw");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchId {
            get {
                return this.MatchIdField;
            }
            set {
                if ((this.MatchIdField.Equals(value) != true)) {
                    this.MatchIdField = value;
                    this.RaisePropertyChanged("MatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WinCommandGuest {
            get {
                return this.WinCommandGuestField;
            }
            set {
                if ((this.WinCommandGuestField.Equals(value) != true)) {
                    this.WinCommandGuestField = value;
                    this.RaisePropertyChanged("WinCommandGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WinCommandHome {
            get {
                return this.WinCommandHomeField;
            }
            set {
                if ((this.WinCommandHomeField.Equals(value) != true)) {
                    this.WinCommandHomeField = value;
                    this.RaisePropertyChanged("WinCommandHome");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SportDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class SportDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SportIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SportId {
            get {
                return this.SportIdField;
            }
            set {
                if ((this.SportIdField.Equals(value) != true)) {
                    this.SportIdField = value;
                    this.RaisePropertyChanged("SportId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TournamentDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class TournamentDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SportIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TournamentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SportId {
            get {
                return this.SportIdField;
            }
            set {
                if ((this.SportIdField.Equals(value) != true)) {
                    this.SportIdField = value;
                    this.RaisePropertyChanged("SportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TournamentId {
            get {
                return this.TournamentIdField;
            }
            set {
                if ((this.TournamentIdField.Equals(value) != true)) {
                    this.TournamentIdField = value;
                    this.RaisePropertyChanged("TournamentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ToteService.IBetListService")]
    public interface IBetListService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetBets", ReplyAction="http://tempuri.org/IBetListService/GetBetsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Data.SqlClient.SqlException), Action="http://tempuri.org/IBetListService/GetBetsSqlExceptionFault", Name="SqlException", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SqlClient")]
        Data.ToteService.BetListDto[] GetBets(System.Nullable<int> sportId, System.Nullable<int> tournamentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetBets", ReplyAction="http://tempuri.org/IBetListService/GetBetsResponse")]
        System.Threading.Tasks.Task<Data.ToteService.BetListDto[]> GetBetsAsync(System.Nullable<int> sportId, System.Nullable<int> tournamentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetBetsAll", ReplyAction="http://tempuri.org/IBetListService/GetBetsAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Data.SqlClient.SqlException), Action="http://tempuri.org/IBetListService/GetBetsAllSqlExceptionFault", Name="SqlException", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SqlClient")]
        Data.ToteService.BetListDto[] GetBetsAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetBetsAll", ReplyAction="http://tempuri.org/IBetListService/GetBetsAllResponse")]
        System.Threading.Tasks.Task<Data.ToteService.BetListDto[]> GetBetsAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetSport", ReplyAction="http://tempuri.org/IBetListService/GetSportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Data.SqlClient.SqlException), Action="http://tempuri.org/IBetListService/GetSportSqlExceptionFault", Name="SqlException", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SqlClient")]
        Data.ToteService.SportDto GetSport(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetSport", ReplyAction="http://tempuri.org/IBetListService/GetSportResponse")]
        System.Threading.Tasks.Task<Data.ToteService.SportDto> GetSportAsync(System.Nullable<int> id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetSports", ReplyAction="http://tempuri.org/IBetListService/GetSportsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Data.SqlClient.SqlException), Action="http://tempuri.org/IBetListService/GetSportsSqlExceptionFault", Name="SqlException", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SqlClient")]
        Data.ToteService.SportDto[] GetSports();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetSports", ReplyAction="http://tempuri.org/IBetListService/GetSportsResponse")]
        System.Threading.Tasks.Task<Data.ToteService.SportDto[]> GetSportsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetTournament", ReplyAction="http://tempuri.org/IBetListService/GetTournamentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Data.SqlClient.SqlException), Action="http://tempuri.org/IBetListService/GetTournamentSqlExceptionFault", Name="SqlException", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SqlClient")]
        Data.ToteService.TournamentDto[] GetTournament(System.Nullable<int> sportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetTournament", ReplyAction="http://tempuri.org/IBetListService/GetTournamentResponse")]
        System.Threading.Tasks.Task<Data.ToteService.TournamentDto[]> GetTournamentAsync(System.Nullable<int> sportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetTournamentes", ReplyAction="http://tempuri.org/IBetListService/GetTournamentesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Data.SqlClient.SqlException), Action="http://tempuri.org/IBetListService/GetTournamentesSqlExceptionFault", Name="SqlException", Namespace="http://schemas.datacontract.org/2004/07/System.Data.SqlClient")]
        Data.ToteService.TournamentDto[] GetTournamentes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBetListService/GetTournamentes", ReplyAction="http://tempuri.org/IBetListService/GetTournamentesResponse")]
        System.Threading.Tasks.Task<Data.ToteService.TournamentDto[]> GetTournamentesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBetListServiceChannel : Data.ToteService.IBetListService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BetListServiceClient : System.ServiceModel.ClientBase<Data.ToteService.IBetListService>, Data.ToteService.IBetListService {
        
        public BetListServiceClient() {
        }
        
        public BetListServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BetListServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BetListServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BetListServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Data.ToteService.BetListDto[] GetBets(System.Nullable<int> sportId, System.Nullable<int> tournamentId) {
            return base.Channel.GetBets(sportId, tournamentId);
        }
        
        public System.Threading.Tasks.Task<Data.ToteService.BetListDto[]> GetBetsAsync(System.Nullable<int> sportId, System.Nullable<int> tournamentId) {
            return base.Channel.GetBetsAsync(sportId, tournamentId);
        }
        
        public Data.ToteService.BetListDto[] GetBetsAll() {
            return base.Channel.GetBetsAll();
        }
        
        public System.Threading.Tasks.Task<Data.ToteService.BetListDto[]> GetBetsAllAsync() {
            return base.Channel.GetBetsAllAsync();
        }
        
        public Data.ToteService.SportDto GetSport(System.Nullable<int> id) {
            return base.Channel.GetSport(id);
        }
        
        public System.Threading.Tasks.Task<Data.ToteService.SportDto> GetSportAsync(System.Nullable<int> id) {
            return base.Channel.GetSportAsync(id);
        }
        
        public Data.ToteService.SportDto[] GetSports() {
            return base.Channel.GetSports();
        }
        
        public System.Threading.Tasks.Task<Data.ToteService.SportDto[]> GetSportsAsync() {
            return base.Channel.GetSportsAsync();
        }
        
        public Data.ToteService.TournamentDto[] GetTournament(System.Nullable<int> sportId) {
            return base.Channel.GetTournament(sportId);
        }
        
        public System.Threading.Tasks.Task<Data.ToteService.TournamentDto[]> GetTournamentAsync(System.Nullable<int> sportId) {
            return base.Channel.GetTournamentAsync(sportId);
        }
        
        public Data.ToteService.TournamentDto[] GetTournamentes() {
            return base.Channel.GetTournamentes();
        }
        
        public System.Threading.Tasks.Task<Data.ToteService.TournamentDto[]> GetTournamentesAsync() {
            return base.Channel.GetTournamentesAsync();
        }
    }
}
