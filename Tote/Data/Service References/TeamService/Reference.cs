//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data.TeamService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class TeamDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SportIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sport {
            get {
                return this.SportField;
            }
            set {
                if ((object.ReferenceEquals(this.SportField, value) != true)) {
                    this.SportField = value;
                    this.RaisePropertyChanged("Sport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SportId {
            get {
                return this.SportIdField;
            }
            set {
                if ((this.SportIdField.Equals(value) != true)) {
                    this.SportIdField = value;
                    this.RaisePropertyChanged("SportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
    [System.SerializableAttribute()]
    public partial class CustomException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class CountryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class MatchDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryGuestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryHomeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SportIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamIdGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamIdHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TournamentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TournamentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryGuest {
            get {
                return this.CountryGuestField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryGuestField, value) != true)) {
                    this.CountryGuestField = value;
                    this.RaisePropertyChanged("CountryGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryGuestId {
            get {
                return this.CountryGuestIdField;
            }
            set {
                if ((this.CountryGuestIdField.Equals(value) != true)) {
                    this.CountryGuestIdField = value;
                    this.RaisePropertyChanged("CountryGuestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryHome {
            get {
                return this.CountryHomeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryHomeField, value) != true)) {
                    this.CountryHomeField = value;
                    this.RaisePropertyChanged("CountryHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryHomeId {
            get {
                return this.CountryHomeIdField;
            }
            set {
                if ((this.CountryHomeIdField.Equals(value) != true)) {
                    this.CountryHomeIdField = value;
                    this.RaisePropertyChanged("CountryHomeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchId {
            get {
                return this.MatchIdField;
            }
            set {
                if ((this.MatchIdField.Equals(value) != true)) {
                    this.MatchIdField = value;
                    this.RaisePropertyChanged("MatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultId {
            get {
                return this.ResultIdField;
            }
            set {
                if ((this.ResultIdField.Equals(value) != true)) {
                    this.ResultIdField = value;
                    this.RaisePropertyChanged("ResultId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((object.ReferenceEquals(this.ScoreField, value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SportId {
            get {
                return this.SportIdField;
            }
            set {
                if ((this.SportIdField.Equals(value) != true)) {
                    this.SportIdField = value;
                    this.RaisePropertyChanged("SportId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamGuest {
            get {
                return this.TeamGuestField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamGuestField, value) != true)) {
                    this.TeamGuestField = value;
                    this.RaisePropertyChanged("TeamGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamHome {
            get {
                return this.TeamHomeField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamHomeField, value) != true)) {
                    this.TeamHomeField = value;
                    this.RaisePropertyChanged("TeamHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamIdGuest {
            get {
                return this.TeamIdGuestField;
            }
            set {
                if ((this.TeamIdGuestField.Equals(value) != true)) {
                    this.TeamIdGuestField = value;
                    this.RaisePropertyChanged("TeamIdGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamIdHome {
            get {
                return this.TeamIdHomeField;
            }
            set {
                if ((this.TeamIdHomeField.Equals(value) != true)) {
                    this.TeamIdHomeField = value;
                    this.RaisePropertyChanged("TeamIdHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tournament {
            get {
                return this.TournamentField;
            }
            set {
                if ((object.ReferenceEquals(this.TournamentField, value) != true)) {
                    this.TournamentField = value;
                    this.RaisePropertyChanged("Tournament");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TournamentId {
            get {
                return this.TournamentIdField;
            }
            set {
                if ((this.TournamentIdField.Equals(value) != true)) {
                    this.TournamentIdField = value;
                    this.RaisePropertyChanged("TournamentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SortDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class SortDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateMatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamGuestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamGuestCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamHomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamHomeCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TournamentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateMatch {
            get {
                return this.DateMatchField;
            }
            set {
                if ((this.DateMatchField.Equals(value) != true)) {
                    this.DateMatchField = value;
                    this.RaisePropertyChanged("DateMatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchId {
            get {
                return this.MatchIdField;
            }
            set {
                if ((this.MatchIdField.Equals(value) != true)) {
                    this.MatchIdField = value;
                    this.RaisePropertyChanged("MatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((object.ReferenceEquals(this.ScoreField, value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamGuest {
            get {
                return this.TeamGuestField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamGuestField, value) != true)) {
                    this.TeamGuestField = value;
                    this.RaisePropertyChanged("TeamGuest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamGuestCountry {
            get {
                return this.TeamGuestCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamGuestCountryField, value) != true)) {
                    this.TeamGuestCountryField = value;
                    this.RaisePropertyChanged("TeamGuestCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamHome {
            get {
                return this.TeamHomeField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamHomeField, value) != true)) {
                    this.TeamHomeField = value;
                    this.RaisePropertyChanged("TeamHome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamHomeCountry {
            get {
                return this.TeamHomeCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamHomeCountryField, value) != true)) {
                    this.TeamHomeCountryField = value;
                    this.RaisePropertyChanged("TeamHomeCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tournament {
            get {
                return this.TournamentField;
            }
            set {
                if ((object.ReferenceEquals(this.TournamentField, value) != true)) {
                    this.TournamentField = value;
                    this.RaisePropertyChanged("Tournament");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class ResultDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultId {
            get {
                return this.ResultIdField;
            }
            set {
                if ((this.ResultIdField.Equals(value) != true)) {
                    this.ResultIdField = value;
                    this.RaisePropertyChanged("ResultId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Dto")]
    [System.SerializableAttribute()]
    public partial class EventDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CoefficientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Coefficient {
            get {
                return this.CoefficientField;
            }
            set {
                if ((this.CoefficientField.Equals(value) != true)) {
                    this.CoefficientField = value;
                    this.RaisePropertyChanged("Coefficient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchId {
            get {
                return this.MatchIdField;
            }
            set {
                if ((this.MatchIdField.Equals(value) != true)) {
                    this.MatchIdField = value;
                    this.RaisePropertyChanged("MatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TeamService.ITeamService")]
    public interface ITeamService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeams", ReplyAction="http://tempuri.org/ITeamService/GetTeamsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/GetTeamsCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.TeamDto[] GetTeams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeams", ReplyAction="http://tempuri.org/ITeamService/GetTeamsResponse")]
        System.Threading.Tasks.Task<Data.TeamService.TeamDto[]> GetTeamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeamById", ReplyAction="http://tempuri.org/ITeamService/GetTeamByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/GetTeamByIdCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.TeamDto GetTeamById(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeamById", ReplyAction="http://tempuri.org/ITeamService/GetTeamByIdResponse")]
        System.Threading.Tasks.Task<Data.TeamService.TeamDto> GetTeamByIdAsync(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/UpdateTeam", ReplyAction="http://tempuri.org/ITeamService/UpdateTeamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/UpdateTeamCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool UpdateTeam(Data.TeamService.TeamDto teamDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/UpdateTeam", ReplyAction="http://tempuri.org/ITeamService/UpdateTeamResponse")]
        System.Threading.Tasks.Task<bool> UpdateTeamAsync(Data.TeamService.TeamDto teamDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/AddTeam", ReplyAction="http://tempuri.org/ITeamService/AddTeamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/AddTeamCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool AddTeam(Data.TeamService.TeamDto teamDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/AddTeam", ReplyAction="http://tempuri.org/ITeamService/AddTeamResponse")]
        System.Threading.Tasks.Task<bool> AddTeamAsync(Data.TeamService.TeamDto teamDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/DeleteTeam", ReplyAction="http://tempuri.org/ITeamService/DeleteTeamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/DeleteTeamCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool DeleteTeam(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/DeleteTeam", ReplyAction="http://tempuri.org/ITeamService/DeleteTeamResponse")]
        System.Threading.Tasks.Task<bool> DeleteTeamAsync(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeamsByTournament", ReplyAction="http://tempuri.org/ITeamService/GetTeamsByTournamentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/GetTeamsByTournamentCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.TeamDto[] GetTeamsByTournament(int tournamentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetTeamsByTournament", ReplyAction="http://tempuri.org/ITeamService/GetTeamsByTournamentResponse")]
        System.Threading.Tasks.Task<Data.TeamService.TeamDto[]> GetTeamsByTournamentAsync(int tournamentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetCountriesAll", ReplyAction="http://tempuri.org/ITeamService/GetCountriesAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/GetCountriesAllCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.CountryDto[] GetCountriesAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetCountriesAll", ReplyAction="http://tempuri.org/ITeamService/GetCountriesAllResponse")]
        System.Threading.Tasks.Task<Data.TeamService.CountryDto[]> GetCountriesAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetCountryById", ReplyAction="http://tempuri.org/ITeamService/GetCountryByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/GetCountryByIdCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.CountryDto GetCountryById(int countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetCountryById", ReplyAction="http://tempuri.org/ITeamService/GetCountryByIdResponse")]
        System.Threading.Tasks.Task<Data.TeamService.CountryDto> GetCountryByIdAsync(int countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetCountryByTeam", ReplyAction="http://tempuri.org/ITeamService/GetCountryByTeamResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/GetCountryByTeamCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.CountryDto GetCountryByTeam(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/GetCountryByTeam", ReplyAction="http://tempuri.org/ITeamService/GetCountryByTeamResponse")]
        System.Threading.Tasks.Task<Data.TeamService.CountryDto> GetCountryByTeamAsync(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/UpdateCountry", ReplyAction="http://tempuri.org/ITeamService/UpdateCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/UpdateCountryCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool UpdateCountry(Data.TeamService.CountryDto countryDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/UpdateCountry", ReplyAction="http://tempuri.org/ITeamService/UpdateCountryResponse")]
        System.Threading.Tasks.Task<bool> UpdateCountryAsync(Data.TeamService.CountryDto countryDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/AddCountry", ReplyAction="http://tempuri.org/ITeamService/AddCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/AddCountryCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool AddCountry(Data.TeamService.CountryDto countryDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/AddCountry", ReplyAction="http://tempuri.org/ITeamService/AddCountryResponse")]
        System.Threading.Tasks.Task<bool> AddCountryAsync(Data.TeamService.CountryDto countryDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/DeleteCountry", ReplyAction="http://tempuri.org/ITeamService/DeleteCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/ITeamService/DeleteCountryCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool DeleteCountry(int countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeamService/DeleteCountry", ReplyAction="http://tempuri.org/ITeamService/DeleteCountryResponse")]
        System.Threading.Tasks.Task<bool> DeleteCountryAsync(int countryId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITeamServiceChannel : Data.TeamService.ITeamService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TeamServiceClient : System.ServiceModel.ClientBase<Data.TeamService.ITeamService>, Data.TeamService.ITeamService {
        
        public TeamServiceClient() {
        }
        
        public TeamServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TeamServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeamServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeamServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Data.TeamService.TeamDto[] GetTeams() {
            return base.Channel.GetTeams();
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.TeamDto[]> GetTeamsAsync() {
            return base.Channel.GetTeamsAsync();
        }
        
        public Data.TeamService.TeamDto GetTeamById(int teamId) {
            return base.Channel.GetTeamById(teamId);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.TeamDto> GetTeamByIdAsync(int teamId) {
            return base.Channel.GetTeamByIdAsync(teamId);
        }
        
        public bool UpdateTeam(Data.TeamService.TeamDto teamDto) {
            return base.Channel.UpdateTeam(teamDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTeamAsync(Data.TeamService.TeamDto teamDto) {
            return base.Channel.UpdateTeamAsync(teamDto);
        }
        
        public bool AddTeam(Data.TeamService.TeamDto teamDto) {
            return base.Channel.AddTeam(teamDto);
        }
        
        public System.Threading.Tasks.Task<bool> AddTeamAsync(Data.TeamService.TeamDto teamDto) {
            return base.Channel.AddTeamAsync(teamDto);
        }
        
        public bool DeleteTeam(int teamId) {
            return base.Channel.DeleteTeam(teamId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTeamAsync(int teamId) {
            return base.Channel.DeleteTeamAsync(teamId);
        }
        
        public Data.TeamService.TeamDto[] GetTeamsByTournament(int tournamentId) {
            return base.Channel.GetTeamsByTournament(tournamentId);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.TeamDto[]> GetTeamsByTournamentAsync(int tournamentId) {
            return base.Channel.GetTeamsByTournamentAsync(tournamentId);
        }
        
        public Data.TeamService.CountryDto[] GetCountriesAll() {
            return base.Channel.GetCountriesAll();
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.CountryDto[]> GetCountriesAllAsync() {
            return base.Channel.GetCountriesAllAsync();
        }
        
        public Data.TeamService.CountryDto GetCountryById(int countryId) {
            return base.Channel.GetCountryById(countryId);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.CountryDto> GetCountryByIdAsync(int countryId) {
            return base.Channel.GetCountryByIdAsync(countryId);
        }
        
        public Data.TeamService.CountryDto GetCountryByTeam(int teamId) {
            return base.Channel.GetCountryByTeam(teamId);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.CountryDto> GetCountryByTeamAsync(int teamId) {
            return base.Channel.GetCountryByTeamAsync(teamId);
        }
        
        public bool UpdateCountry(Data.TeamService.CountryDto countryDto) {
            return base.Channel.UpdateCountry(countryDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCountryAsync(Data.TeamService.CountryDto countryDto) {
            return base.Channel.UpdateCountryAsync(countryDto);
        }
        
        public bool AddCountry(Data.TeamService.CountryDto countryDto) {
            return base.Channel.AddCountry(countryDto);
        }
        
        public System.Threading.Tasks.Task<bool> AddCountryAsync(Data.TeamService.CountryDto countryDto) {
            return base.Channel.AddCountryAsync(countryDto);
        }
        
        public bool DeleteCountry(int countryId) {
            return base.Channel.DeleteCountry(countryId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCountryAsync(int countryId) {
            return base.Channel.DeleteCountryAsync(countryId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TeamService.IMatchService")]
    public interface IMatchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetMatchesAll", ReplyAction="http://tempuri.org/IMatchService/GetMatchesAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/GetMatchesAllCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.MatchDto[] GetMatchesAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetMatchesAll", ReplyAction="http://tempuri.org/IMatchService/GetMatchesAllResponse")]
        System.Threading.Tasks.Task<Data.TeamService.MatchDto[]> GetMatchesAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetMatchById", ReplyAction="http://tempuri.org/IMatchService/GetMatchByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/GetMatchByIdCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.MatchDto GetMatchById(int matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetMatchById", ReplyAction="http://tempuri.org/IMatchService/GetMatchByIdResponse")]
        System.Threading.Tasks.Task<Data.TeamService.MatchDto> GetMatchByIdAsync(int matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/UpdateMatch", ReplyAction="http://tempuri.org/IMatchService/UpdateMatchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/UpdateMatchCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool UpdateMatch(Data.TeamService.MatchDto matchDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/UpdateMatch", ReplyAction="http://tempuri.org/IMatchService/UpdateMatchResponse")]
        System.Threading.Tasks.Task<bool> UpdateMatchAsync(Data.TeamService.MatchDto matchDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/AddMatch", ReplyAction="http://tempuri.org/IMatchService/AddMatchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/AddMatchCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool AddMatch(Data.TeamService.MatchDto matchDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/AddMatch", ReplyAction="http://tempuri.org/IMatchService/AddMatchResponse")]
        System.Threading.Tasks.Task<bool> AddMatchAsync(Data.TeamService.MatchDto matchDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/DeleteMatch", ReplyAction="http://tempuri.org/IMatchService/DeleteMatchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/DeleteMatchCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool DeleteMatch(int matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/DeleteMatch", ReplyAction="http://tempuri.org/IMatchService/DeleteMatchResponse")]
        System.Threading.Tasks.Task<bool> DeleteMatchAsync(int matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetMatchBySportDateStatus", ReplyAction="http://tempuri.org/IMatchService/GetMatchBySportDateStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/GetMatchBySportDateStatusCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.SortDto[] GetMatchBySportDateStatus(int sportId, string dateMatch, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetMatchBySportDateStatus", ReplyAction="http://tempuri.org/IMatchService/GetMatchBySportDateStatusResponse")]
        System.Threading.Tasks.Task<Data.TeamService.SortDto[]> GetMatchBySportDateStatusAsync(int sportId, string dateMatch, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetResultsAll", ReplyAction="http://tempuri.org/IMatchService/GetResultsAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IMatchService/GetResultsAllCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.ResultDto[] GetResultsAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchService/GetResultsAll", ReplyAction="http://tempuri.org/IMatchService/GetResultsAllResponse")]
        System.Threading.Tasks.Task<Data.TeamService.ResultDto[]> GetResultsAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceChannel : Data.TeamService.IMatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchServiceClient : System.ServiceModel.ClientBase<Data.TeamService.IMatchService>, Data.TeamService.IMatchService {
        
        public MatchServiceClient() {
        }
        
        public MatchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Data.TeamService.MatchDto[] GetMatchesAll() {
            return base.Channel.GetMatchesAll();
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.MatchDto[]> GetMatchesAllAsync() {
            return base.Channel.GetMatchesAllAsync();
        }
        
        public Data.TeamService.MatchDto GetMatchById(int matchId) {
            return base.Channel.GetMatchById(matchId);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.MatchDto> GetMatchByIdAsync(int matchId) {
            return base.Channel.GetMatchByIdAsync(matchId);
        }
        
        public bool UpdateMatch(Data.TeamService.MatchDto matchDto) {
            return base.Channel.UpdateMatch(matchDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMatchAsync(Data.TeamService.MatchDto matchDto) {
            return base.Channel.UpdateMatchAsync(matchDto);
        }
        
        public bool AddMatch(Data.TeamService.MatchDto matchDto) {
            return base.Channel.AddMatch(matchDto);
        }
        
        public System.Threading.Tasks.Task<bool> AddMatchAsync(Data.TeamService.MatchDto matchDto) {
            return base.Channel.AddMatchAsync(matchDto);
        }
        
        public bool DeleteMatch(int matchId) {
            return base.Channel.DeleteMatch(matchId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMatchAsync(int matchId) {
            return base.Channel.DeleteMatchAsync(matchId);
        }
        
        public Data.TeamService.SortDto[] GetMatchBySportDateStatus(int sportId, string dateMatch, int status) {
            return base.Channel.GetMatchBySportDateStatus(sportId, dateMatch, status);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.SortDto[]> GetMatchBySportDateStatusAsync(int sportId, string dateMatch, int status) {
            return base.Channel.GetMatchBySportDateStatusAsync(sportId, dateMatch, status);
        }
        
        public Data.TeamService.ResultDto[] GetResultsAll() {
            return base.Channel.GetResultsAll();
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.ResultDto[]> GetResultsAllAsync() {
            return base.Channel.GetResultsAllAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TeamService.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvents", ReplyAction="http://tempuri.org/IEventService/GetEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IEventService/GetEventsCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        Data.TeamService.EventDto[] GetEvents(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvents", ReplyAction="http://tempuri.org/IEventService/GetEventsResponse")]
        System.Threading.Tasks.Task<Data.TeamService.EventDto[]> GetEventsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvents", ReplyAction="http://tempuri.org/IEventService/UpdateEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IEventService/UpdateEventsCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool UpdateEvents(Data.TeamService.EventDto[] eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvents", ReplyAction="http://tempuri.org/IEventService/UpdateEventsResponse")]
        System.Threading.Tasks.Task<bool> UpdateEventsAsync(Data.TeamService.EventDto[] eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEvents", ReplyAction="http://tempuri.org/IEventService/AddEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IEventService/AddEventsCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.CustomException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.TeamDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.TeamDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.CountryDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.CountryDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.MatchDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.MatchDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.SortDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.SortDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.ResultDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.ResultDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.EventDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.TeamService.EventDto))]
        bool AddEvents(object eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEvents", ReplyAction="http://tempuri.org/IEventService/AddEventsResponse")]
        System.Threading.Tasks.Task<bool> AddEventsAsync(object eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvents", ReplyAction="http://tempuri.org/IEventService/DeleteEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Data.TeamService.CustomException), Action="http://tempuri.org/IEventService/DeleteEventsCustomExceptionFault", Name="CustomException", Namespace="http://schemas.datacontract.org/2004/07/Service.Contracts.Exception")]
        bool DeleteEvents(int matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvents", ReplyAction="http://tempuri.org/IEventService/DeleteEventsResponse")]
        System.Threading.Tasks.Task<bool> DeleteEventsAsync(int matchId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : Data.TeamService.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<Data.TeamService.IEventService>, Data.TeamService.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Data.TeamService.EventDto[] GetEvents(int id) {
            return base.Channel.GetEvents(id);
        }
        
        public System.Threading.Tasks.Task<Data.TeamService.EventDto[]> GetEventsAsync(int id) {
            return base.Channel.GetEventsAsync(id);
        }
        
        public bool UpdateEvents(Data.TeamService.EventDto[] eventDto) {
            return base.Channel.UpdateEvents(eventDto);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEventsAsync(Data.TeamService.EventDto[] eventDto) {
            return base.Channel.UpdateEventsAsync(eventDto);
        }
        
        public bool AddEvents(object eventDto) {
            return base.Channel.AddEvents(eventDto);
        }
        
        public System.Threading.Tasks.Task<bool> AddEventsAsync(object eventDto) {
            return base.Channel.AddEventsAsync(eventDto);
        }
        
        public bool DeleteEvents(int matchId) {
            return base.Channel.DeleteEvents(matchId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEventsAsync(int matchId) {
            return base.Channel.DeleteEventsAsync(matchId);
        }
    }
}
